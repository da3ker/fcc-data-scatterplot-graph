{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","xScale","yScale","useState","cyclistData","setCyclistData","useEffect","a","fetch","response","json","data","console","log","fetchData","padding","svg","d3","tooltip","attr","domain","d","range","width","Date","height","selectAll","enter","append","on","style","html","pageX","pageY","xAxis","tickFormat","yAxis","call","generateAxes","className","id","x","y","dominantBaseline","textAnchor","fill","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d439172.chunk.js","sourcesContent":["import * as d3 from \"d3\";\nimport {useState, useEffect} from 'react';\nimport './App.scss';\n\nfunction App() {\n const [cyclistData, setCyclistData] = useState(\"initialState\")\n\n useEffect(() => {\n  async function fetchData(){\n    const response = await fetch('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json');\n    const data = await response.json();\n    console.log(data);\n    setCyclistData(data);\n  }\n  fetchData()\n }, [])\n \n let xScale, yScale;\n\n let width = 800;\n let height = 600;\n let padding = 90;\n\n let svg = d3.select(\"svg\")\n let tooltip = d3.select(\"#tooltip\")\n      \n const drawCanvas = () => {\n   svg.attr(\"width\", width)\n      .attr(\"height\", height)\n }\n\n const generateScales = () => {\n  xScale = d3.scaleLinear()\n             .domain([d3.min(cyclistData, (d) => d[\"Year\"])- 1, d3.max(cyclistData, (d) => d[\"Year\"]) +1])\n             .range([padding, width - padding])\n  \n  yScale = d3.scaleTime()\n             .domain([d3.min(cyclistData, (d) => new Date(d[\"Seconds\"] * 1000)),\n                      d3.max(cyclistData, (d) => new Date(d[\"Seconds\"] * 1000))])\n             .range([padding, height - padding])\n  \n\n }\n\n const drawPoints = () => {\n  svg.selectAll(\"circle\")\n     .data(cyclistData)\n     .enter()\n     .append(\"circle\")\n     .attr(\"class\", \"dot\")\n     .attr(\"r\", 6)\n     .attr(\"data-xvalue\", (d) => d[\"Year\"])\n     .attr(\"data-yvalue\", (d) =>  new Date(d[\"Seconds\"] * 1000))\n     .attr(\"cx\", (d) => xScale(d[\"Year\"]))\n     .attr(\"cy\", (d) => yScale(new Date(d[\"Seconds\"] * 1000)))\n     .attr(\"fill\", (d) => {\n       return d[\"Doping\"] !== \"\" ? \"#47FF63\" : \"#FEFF47\";\n     })\n     .on(\"mouseover\", (d) => {\n       tooltip.style(\"visibility\", \"visible\")\n       tooltip.html(d[\"Name\"] + \": \" \n                    + d[\"Nationality\"] \n                    + \"<br/>Year: \" \n                    + d[\"Year\"] + \", Time: \" \n                    + d[\"Time\"] \n                    + (d[\"Doping\"] ? \"<br/><br/>\" + d[\"Doping\"] : '')\n                    )\n              .style(\"left\", d3.event.pageX + \"px\")\n              .style(\"top\", d3.event.pageY - 28 + \"px\")\n              .style(\"background-color\", d[\"Doping\"] ? \"rgba(71, 255, 99, 0.8)\" : \"rgba(254, 255, 71, 0.8)\")\n      \n      tooltip.attr(\"data-year\", d[\"Year\"])\n     })\n     .on(\"mouseout\", (d) => {\n       tooltip.style(\"visibility\", \"hidden\")\n     })\n\n }\n\n const generateAxes = () => {\n   let xAxis = d3.axisBottom(xScale) \n                 .tickFormat(d3.format('d'))\n   let yAxis = d3.axisLeft(yScale)\n                 .tickFormat(d3.timeFormat(\"%M:%S\"))\n               \n                 \n   svg.append('g')\n      .call(xAxis)\n      .attr(\"id\", \"x-axis\")\n      .attr('transform', 'translate(0, ' + (height - padding) + ')')\n\n  svg.append('g')\n     .call(yAxis)\n     .attr(\"id\", \"y-axis\")\n     .attr('transform', 'translate(' + padding + ', 0)')\n    \n\n }\n\nuseEffect(() => {\n  drawCanvas()\n  generateScales()\n  drawPoints()\n  generateAxes()\n})\n\n  return (\n    <div className=\"App\">\n      <svg id=\"canvas\">\n        <text id=\"title\" x=\"50%\" y=\"5%\" dominantBaseline=\"middle\" textAnchor=\"middle\" >Doping in Professional Bicycle Racing</text>\n        <text id=\"sub-title\" x=\"50%\" y=\"9%\" dominantBaseline=\"middle\" textAnchor=\"middle\" >35 Fastest times up Alpe d'Huez</text>\n        <g id=\"legend\">\n          <text x=\"75%\" y=\"45%\">No doping allegations</text>\n          <rect width=\"18\" height=\"18\" fill=\"#FEFF47\" x=\"72%\" y=\"42.6%\"></rect>\n          <text x=\"75%\" y=\"49%\">Riders with doping allegations</text>\n          <rect width=\"18\" height=\"18\" fill=\"#47FF63\" x=\"72%\" y=\"46.7%\"></rect>\n        </g>\n      </svg>\n      <div id=\"tooltip\"></div>\n      <br/>\n      <br/>\n      <span id=\"da3ker\">by da3ker</span>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}